import React from "react"
import { useState, useEffect } from "react"
import { Button, Card, Tag, SectionTitle } from "../ui"

export const Home = () => {
const [isVisible, setIsVisible] = useState(false)
  const [displayText, setDisplayText] = useState("")
  const [currentWordIndex, setCurrentWordIndex] = useState(0)
  const [isDeleting, setIsDeleting] = useState(false)
  const [typeSpeed, setTypeSpeed] = useState(150)
  
  const dynamicWords = ["Palala", "C√¥ng ngh·ªá", "S√°ng t·∫°o", "ƒêam m√™"]

  useEffect(() => {
    // Animation khi component mount
    setTimeout(() => setIsVisible(true), 100)
    
    // Typewriter effect
    const handleType = () => {
      const currentWord = dynamicWords[currentWordIndex]
      
      if (isDeleting) {
        setDisplayText(currentWord.substring(0, displayText.length - 1))
        setTypeSpeed(50) // X√≥a nhanh h∆°n
      } else {
        setDisplayText(currentWord.substring(0, displayText.length + 1))
        setTypeSpeed(150) // G√µ ch·∫≠m h∆°n
      }
      
      if (!isDeleting && displayText === currentWord) {
        // D·ª´ng l·∫°i 1.5s tr∆∞·ªõc khi x√≥a
        setTimeout(() => setIsDeleting(true), 1500)
      } else if (isDeleting && displayText === "") {
        setIsDeleting(false)
        setCurrentWordIndex((prev) => (prev + 1) % dynamicWords.length)
      }
    }
    
    const timer = setTimeout(handleType, typeSpeed)
    return () => clearTimeout(timer)
  }, [displayText, isDeleting, currentWordIndex, typeSpeed, dynamicWords])

  return (
    <div className="min-h-screen bg-white">
      {/* Hero Section v·ªõi hi·ªáu ·ª©ng */}
      <section id="home" className="pt-32 pb-20 px-6 relative overflow-hidden">
        {/* Background Effects */}
        <div className="absolute inset-0 bg-gradient-to-br from-blue-50/30 via-white to-purple-50/30"></div>
        <div className="absolute top-20 left-10 w-72 h-72 bg-blue-100 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
        <div className="absolute top-40 right-10 w-96 h-96 bg-purple-100 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-2000"></div>
        <div className="absolute bottom-20 left-1/3 w-80 h-80 bg-pink-100 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-4000"></div>
        
        <div className="container mx-auto max-w-4xl relative z-10">
          <div className="space-y-8">
            <div>
              <h1 className={`text-6xl md:text-7xl font-bold text-gray-900 leading-tight mb-6 transition-all duration-1000 ${
                isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
              }`}>
                <span className="block overflow-hidden">
                  <span className={`block transition-all duration-700 delay-200 ${
                    isVisible ? 'translate-y-0' : 'translate-y-full'
                  }`}>
                    Ch√†o m·ª´ng ƒë·∫øn v·ªõi
                  </span>
                </span>
                <span className="relative inline-block">
                  <span 
                    className={`text-transparent bg-clip-text bg-gradient-to-r from-blue-600 via-purple-600 to-blue-800 transition-all duration-700 delay-500 ${
                      isVisible ? 'translate-y-0 opacity-100' : 'translate-y-full opacity-0'
                    }`}
                    style={{
                      animation: 'gradient-x 3s ease infinite',
                      minWidth: '400px',
                      display: 'inline-block'
                    }}
                  >
                    {displayText}
                    {/* Blinking cursor */}
                    <span 
                      className="inline-block w-1 h-full bg-blue-600 ml-1"
                      style={{
                        animation: 'blink 1s infinite',
                        verticalAlign: 'top'
                      }}
                    ></span>
                  </span>
                </span>
              </h1>
              
              <p className={`text-2xl text-gray-600 leading-relaxed max-w-3xl transition-all duration-1000 delay-700 ${
                isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
              }`}>
                <span className="relative">
                  Kh√°m ph√° th·∫ø gi·ªõi c√¥ng ngh·ªá qua nh·ªØng d·ª± √°n s√°ng t·∫°o v√† chia s·∫ª ki·∫øn th·ª©c l·∫≠p tr√¨nh.
                  <span className="absolute -bottom-2 left-0 w-full h-0.5 bg-gradient-to-r from-blue-500 to-purple-500 transform origin-left transition-all duration-1000 delay-1000 scale-x-0"
                    style={{ transform: isVisible ? 'scaleX(1)' : 'scaleX(0)' }}
                  ></span>
                </span>
              </p>
            </div>
            
            <div className={`flex flex-col sm:flex-row gap-4 transition-all duration-1000 delay-1000 ${
              isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
            }`}>
              <Button variant="primary" href="#projects" className="group">
                <span className="mr-2">Xem d·ª± √°n</span>
                <span className="transform transition-transform group-hover:translate-x-1">‚Üí</span>
              </Button>
              <Button variant="outline" href="#about" className="group">
                <span className="mr-2">V·ªÅ t√¥i</span>
                <span className="transform transition-transform group-hover:scale-110">üëã</span>
              </Button>
            </div>

            {/* Floating Elements */}
            <div className="absolute top-1/4 right-1/4 opacity-20">
              <div className="w-4 h-4 bg-blue-500 rounded-full animate-bounce animation-delay-1000"></div>
            </div>
            <div className="absolute top-3/4 left-1/4 opacity-20">
              <div className="w-6 h-6 bg-purple-500 rounded-full animate-bounce animation-delay-2000"></div>
            </div>
            <div className="absolute top-1/2 right-1/6 opacity-20">
              <div className="w-3 h-3 bg-pink-500 rounded-full animate-bounce animation-delay-3000"></div>
            </div>
          </div>
        </div>

        {/* Scroll Indicator */}
        <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2">
          <div className="flex flex-col items-center space-y-2 text-gray-400 animate-bounce">
            <span className="text-sm">Cu·ªôn xu·ªëng</span>
            <div className="w-6 h-10 border-2 border-gray-300 rounded-full relative">
              <div className="w-1 h-3 bg-gray-400 rounded-full absolute top-2 left-1/2 transform -translate-x-1/2 animate-pulse"></div>
            </div>
          </div>
        </div>
      </section>

      {/* About Section */}
      <section id="about" className="py-24 bg-gray-50 px-6">
        <div className="container mx-auto max-w-6xl">
          <SectionTitle title="V·ªÅ t√¥i" />
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center">
            <div>
              <p className="text-lg text-gray-600 leading-relaxed mb-8">
                T√¥i l√† m·ªôt developer ƒëam m√™ c√¥ng ngh·ªá, lu√¥n t√¨m ki·∫øm nh·ªØng gi·∫£i ph√°p s√°ng t·∫°o cho c√°c v·∫•n ƒë·ªÅ ph·ª©c t·∫°p.
                V·ªõi kinh nghi·ªám trong ph√°t tri·ªÉn web v√† ·ª©ng d·ª•ng, t√¥i mong mu·ªën chia s·∫ª ki·∫øn th·ª©c v√† h·ªçc h·ªèi t·ª´ c·ªông ƒë·ªìng.
              </p>
              <div className="flex flex-wrap gap-3">
                <Tag variant="blue">React</Tag>
                <Tag variant="blue">Next.js</Tag>
                <Tag variant="green">Node.js</Tag>
                <Tag variant="green">TypeScript</Tag>
                <Tag>Tailwind CSS</Tag>
              </div>
            </div>
            
            <div className="grid grid-cols-1 gap-8">
              <SkillCard 
                title="Frontend Development" 
                description="X√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng hi·ªán ƒë·∫°i v√† responsive"
                tools="React, Next.js, TypeScript"
              />
              <SkillCard 
                title="UI/UX Design" 
                description="Thi·∫øt k·∫ø tr·∫£i nghi·ªám ng∆∞·ªùi d√πng tr·ª±c quan v√† th√¢n thi·ªán"
                tools="Figma, Tailwind CSS"
              />
              <SkillCard 
                title="Backend & Deployment" 
                description="Ph√°t tri·ªÉn API v√† tri·ªÉn khai ·ª©ng d·ª•ng"
                tools="Node.js, AWS, Docker"
              />
            </div>
          </div>
        </div>
      </section>

      {/* Projects Section */}
      <section id="projects" className="py-24 px-6">
        <div className="container mx-auto max-w-6xl">
          <SectionTitle 
            title="D·ª± √°n n·ªïi b·∫≠t" 
            subtitle="M·ªôt s·ªë d·ª± √°n t√¥i ƒë√£ th·ª±c hi·ªán g·∫ßn ƒë√¢y"
          />
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {[
              {
                id: 1,
                title: "E-commerce Platform",
                description: "N·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ v·ªõi giao di·ªán hi·ªán ƒë·∫°i v√† t√≠nh nƒÉng thanh to√°n t√≠ch h·ª£p.",
                image: "bg-gradient-to-br from-blue-50 to-indigo-100",
                tags: ["React", "Node.js"]
              },
              {
                id: 2,
                title: "Task Management App",
                description: "·ª®ng d·ª•ng qu·∫£n l√Ω c√¥ng vi·ªác v·ªõi giao di·ªán tr·ª±c quan v√† kh·∫£ nƒÉng c·ªông t√°c nh√≥m.",
                image: "bg-gradient-to-br from-green-50 to-emerald-100",
                tags: ["Vue.js", "Express"]
              },
              {
                id: 3,
                title: "Portfolio Website",
                description: "Website portfolio c√° nh√¢n v·ªõi thi·∫øt k·∫ø responsive v√† t·ªëi ∆∞u SEO.",
                image: "bg-gradient-to-br from-purple-50 to-pink-100",
                tags: ["Next.js", "Tailwind"]
              }
            ].map((project) => (
              <Card key={project.id} className="group overflow-hidden">
                <div className={`h-48 ${project.image} relative`}>
                  <div className="absolute inset-0 bg-black/0 group-hover:bg-black/5 transition-colors duration-200"></div>
                </div>
                <div className="p-6">
                  <h3 className="font-semibold text-gray-900 mb-2 text-lg">{project.title}</h3>
                  <p className="text-gray-600 mb-4 text-sm leading-relaxed">
                    {project.description}
                  </p>
                  <div className="flex gap-2">
                    {project.tags.map((tag, index) => (
                      <Tag key={index} variant={index === 0 ? "blue" : "default"}>{tag}</Tag>
                    ))}
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Blog Section */}
      <section id="blog" className="py-24 bg-gray-50 px-6">
        <div className="container mx-auto max-w-6xl">
          <SectionTitle 
            title="Blog" 
            subtitle="Chia s·∫ª ki·∫øn th·ª©c v√† kinh nghi·ªám trong l·∫≠p tr√¨nh"
          />
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {[
              {
                id: 1,
                title: "T·ªëi ∆∞u hi·ªáu su·∫•t React Application",
                excerpt: "H∆∞·ªõng d·∫´n c√°c k·ªπ thu·∫≠t t·ªëi ∆∞u hi·ªáu su·∫•t cho ·ª©ng d·ª•ng React, t·ª´ code splitting ƒë·∫øn lazy loading...",
                date: "15 th√°ng 12, 2024",
                readTime: "5 ph√∫t ƒë·ªçc"
              },
              {
                id: 2,
                title: "Thi·∫øt k·∫ø responsive v·ªõi Tailwind CSS",
                excerpt: "Kh√°m ph√° c√°c best practices khi s·ª≠ d·ª•ng Tailwind CSS ƒë·ªÉ t·∫°o ra giao di·ªán responsive...",
                date: "10 th√°ng 12, 2024",
                readTime: "7 ph√∫t ƒë·ªçc"
              },
              {
                id: 3,
                title: "Deployment automation v·ªõi GitHub Actions",
                excerpt: "H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p CI/CD pipeline t·ª± ƒë·ªông v·ªõi GitHub Actions cho d·ª± √°n web...",
                date: "5 th√°ng 12, 2024",
                readTime: "10 ph√∫t ƒë·ªçc"
              },
              {
                id: 4,
                title: "TypeScript trong d·ª± √°n React",
                excerpt: "L·ª£i √≠ch v√† c√°ch t√≠ch h·ª£p TypeScript v√†o d·ª± √°n React ƒë·ªÉ tƒÉng t√≠nh b·∫£o m·∫≠t code...",
                date: "1 th√°ng 12, 2024",
                readTime: "8 ph√∫t ƒë·ªçc"
              }
            ].map((post) => (
              <Card key={post.id} className="p-6">
                <article>
                  <h3 className="font-semibold text-gray-900 mb-3 text-lg leading-snug">
                    {post.title}
                  </h3>
                  <p className="text-gray-600 mb-4 leading-relaxed">
                    {post.excerpt}
                  </p>
                  <div className="flex items-center justify-between text-sm text-gray-500">
                    <div className="flex items-center space-x-4">
                      <span>{post.date}</span>
                      <span>{post.readTime}</span>
                    </div>
                    <a href="#" className="text-gray-900 hover:text-gray-600 transition-colors font-medium group">
                      ƒê·ªçc th√™m <span className="inline-block transition-transform group-hover:translate-x-1">‚Üí</span>
                    </a>
                  </div>
                </article>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Custom CSS for animations */}
      <style jsx>{`
        @keyframes gradient-x {
          0%, 100% {
            background-size: 200% 200%;
            background-position: left center;
          }
          50% {
            background-size: 200% 200%;
            background-position: right center;
          }
        }
        
        @keyframes blink {
          0%, 50% {
            opacity: 1;
          }
          51%, 100% {
            opacity: 0;
          }
        }
        
        .animation-delay-1000 {
          animation-delay: 1s;
        }
        
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        
        .animation-delay-3000 {
          animation-delay: 3s;
        }
        
        .animation-delay-4000 {
          animation-delay: 4s;
        }
      `}</style>
    </div>
  )
}

const SkillCard = ({ title, description, tools }) => (
  <div className="border-l-4 border-gray-200 pl-6 hover:border-gray-400 transition-colors duration-200">
    <h3 className="font-semibold text-gray-900 mb-2">{title}</h3>
    <p className="text-gray-600 mb-2 text-sm">{description}</p>
    <p className="text-sm text-gray-500">{tools}</p>
  </div>
)